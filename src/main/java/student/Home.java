/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package student;
import com.opencsv.CSVReader;
import com.opencsv.CSVWriter;
import com.opencsv.exceptions.CsvException;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTable; 
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.TableRowSorter;
/**
 *
 * @author User
 */
public class Home extends javax.swing.JFrame {

    /**
     * Creates new form Home
     */

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jComboBox4 = new javax.swing.JComboBox<>();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jTextField4 = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox5 = new javax.swing.JComboBox<>();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jComboBox3 = new javax.swing.JComboBox<>();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jTextField12 = new javax.swing.JTextField();
        jComboBox6 = new javax.swing.JComboBox<>();
        jComboBox8 = new javax.swing.JComboBox<>();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel15 = new javax.swing.JPanel();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jPanel16 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jTextField10 = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jPanel18 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jTextField14 = new javax.swing.JTextField();
        jComboBox7 = new javax.swing.JComboBox<>();
        jComboBox9 = new javax.swing.JComboBox<>();
        jPanel20 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel21 = new javax.swing.JPanel();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 153, 153)));
        jPanel2.setAutoscrolls(true);

        jLabel1.setFont(new java.awt.Font("Agency FB", 0, 48)); // NOI18N
        jLabel1.setText("STUDENT INFORMATION SHEET");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jTextField1.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        jTextField2.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        jTextField3.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        jTextField5.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        jComboBox1.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F", "M" }));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("ID Number");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("First Name");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Last Name");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Year Level");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Gender");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Program Code");

        jButton3.setText("Add Student");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton6.setText("Clear");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                    .addComponent(jTextField2)
                    .addComponent(jTextField3)
                    .addComponent(jTextField5)
                    .addComponent(jComboBox4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(44, 44, 44))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(109, 109, 109))
        );

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));

        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });
        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField4KeyReleased(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort by:", "ID Number", "First Name", "Last Name", "Year Level", "Gender", "Program Code" }));
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });

        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Search by:", "ID Number", "First Name", "Last Name", "Year Level", "Gender", "Program Code" }));
        jComboBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 614, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox5, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(12, 12, 12)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(2).setHeaderValue("Title 3");
            jTable1.getColumnModel().getColumn(3).setHeaderValue("Title 3");
            jTable1.getColumnModel().getColumn(4).setHeaderValue("Title 5");
            jTable1.getColumnModel().getColumn(5).setHeaderValue("Title 6");
        }

        jButton4.setText("Delete Student");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Edit Student");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(84, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Student", jPanel3);

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));

        jTextField7.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        jTextField8.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Program Code");

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Program Name");

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("College Code");

        jButton7.setText("Add Program");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Clear");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField7, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                    .addComponent(jTextField8)
                    .addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(44, 44, 44))
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jButton7)
                .addGap(18, 18, 18)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(58, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(160, 160, 160)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(109, 109, 109))
        );

        jPanel13.setBackground(new java.awt.Color(255, 255, 255));

        jTextField12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField12ActionPerformed(evt);
            }
        });
        jTextField12.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField12KeyReleased(evt);
            }
        });

        jComboBox6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort by:", "Program Code", "Program Name", "College Code" }));
        jComboBox6.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox6ItemStateChanged(evt);
            }
        });

        jComboBox8.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Search by:", "Program Code", "Program Name", "College Code" }));
        jComboBox8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox8, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField12, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel14.setBackground(new java.awt.Color(255, 255, 255));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        jTable2.getTableHeader().setReorderingAllowed(false);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(2).setHeaderValue("Title 3");
        }

        jButton9.setText("Delete Program");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Edit Program");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(84, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 871, Short.MAX_VALUE)
                    .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Program", jPanel10);

        jPanel16.setBackground(new java.awt.Color(255, 255, 255));

        jTextField10.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        jTextField11.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("College Code");

        jLabel12.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("College Name");

        jButton11.setText("Add College");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setText("Clear");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField10, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                    .addComponent(jTextField11))
                .addGap(44, 44, 44))
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jButton11)
                .addGap(18, 18, 18)
                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(203, 203, 203)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(109, 109, 109))
        );

        jPanel19.setBackground(new java.awt.Color(255, 255, 255));

        jTextField14.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField14KeyReleased(evt);
            }
        });

        jComboBox7.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort by:", "College Code", "College Name" }));
        jComboBox7.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox7ItemStateChanged(evt);
            }
        });

        jComboBox9.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Search by:", "College Code", "College Name" }));

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 611, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox9, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField14, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel20.setBackground(new java.awt.Color(255, 255, 255));

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jTable3.getTableHeader().setReorderingAllowed(false);
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jButton13.setText("Delete College");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setText("Edit College");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(84, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 871, Short.MAX_VALUE)
                    .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("College", jPanel16);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(420, 420, 420))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1246, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (selectedRow >= 0) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            int rowind = jTable1.convertRowIndexToModel(selectedRow);
            String old_id = model.getValueAt(rowind, 0).toString();
            JTextField id = new JTextField(old_id);
            JTextField first_name = new JTextField(model.getValueAt(rowind, 1).toString());
            JTextField last_name = new JTextField(model.getValueAt(rowind, 2).toString());
            JTextField year_level = new JTextField(model.getValueAt(rowind, 3).toString());
            JComboBox<String> gender = new JComboBox<>(new String[]{"M", "F"}); 
            gender.setSelectedItem(model.getValueAt(rowind, 4).toString());
            
            List<String> programs = getprogcodes();
            JComboBox<String> program = new JComboBox<>(programs.toArray(new String[0]));
            program.setSelectedItem(model.getValueAt(rowind, 5).toString());

            Object[] fields = {
                "Student ID:", id,
                "First Name:", first_name,
                "Last Name:", last_name,
                "Year Level:", year_level,
                "Gender:", gender,
                "Program Code:", program
            };

            int result = JOptionPane.showConfirmDialog(null, fields, "Edit Student", JOptionPane.OK_CANCEL_OPTION);

            if (result == JOptionPane.OK_OPTION) {
                StringBuilder missed = new StringBuilder();
                String pattern = "\\d{4}-\\d{4}";

                if (id.getText().trim().isEmpty()) {
                    missed.append("Student ID is missing\n");
                } else if (!id.getText().trim().matches(pattern)) {
                    missed.append("Student ID must follow the format YYYY-XXXX (ex. 2023-1949)\n");
                }

                if (first_name.getText().trim().isEmpty()) {
                    missed.append("First name is missing\n");
                } else if (!first_name.getText().trim().matches("[a-zA-Z ]+")) {
                            missed.append("First name must contain only alphabets\n");
                }
                if (last_name.getText().trim().isEmpty()) {
                    missed.append("Last name is missing\n");
                } else if (!last_name.getText().trim().matches("[a-zA-Z ]+")) {
                    missed.append("Last name must contain only alphabets\n");
                }

                if (year_level.getText().trim().isEmpty()) {
                    missed.append("Year Level is missing\n");
                } else {
                try {
                    int yearLevel = Integer.parseInt(year_level.getText().trim());
                    if (yearLevel < 1 || yearLevel > 6) {
                        missed.append("Year Level must be between 1 and 6\n");
                    }
            } catch (NumberFormatException e) {
                missed.append("Year Level must be a number between 1 and 6\n");
            }
        }
            boolean duplicateExists = false;
            for (int i = 0; i < model.getRowCount(); i++) {
                if (i != selectedRow) { 
                    String newId = id.getText();
                    String existingId = model.getValueAt(i, 0).toString().trim();
                    if (newId.equals(existingId)) {
                        duplicateExists = true;
                        missed.append("Duplicate Student ID found! Student ID must be unique.\n");
                        break;
                    }
                }
            }
        if(duplicateExists) {
            JOptionPane.showMessageDialog(this, "Error: Duplicate Student ID detected!", "Invalid Input", JOptionPane.ERROR_MESSAGE);
                return;
        }

        if (missed.length() > 0) {
            JOptionPane.showMessageDialog(this, missed.toString(), "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return; 
                }
                String newId = id.getText().trim();   
                
                //udpate table
                model.setValueAt(newId, rowind, 0);
                model.setValueAt(first_name.getText(), rowind, 1);
                model.setValueAt(last_name.getText(), rowind, 2);
                model.setValueAt(year_level.getText(), rowind, 3);
                model.setValueAt(gender.getSelectedItem().toString(), rowind, 4);
                model.setValueAt(program.getSelectedItem().toString(), rowind, 5);

                updateCSVstudent(old_id, newId, first_name.getText(), last_name.getText(), year_level.getText(), gender.getSelectedItem().toString(), program.getSelectedItem().toString());

                JOptionPane.showMessageDialog(this, "Student updated");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select a row", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (selectedRow >= 0) { 
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            int rowind = jTable1.convertRowIndexToModel(selectedRow);
            String studentdelete = model.getValueAt(rowind, 0).toString();
            model.removeRow(rowind);

            deleteCSVstudent(studentdelete);

            JOptionPane.showMessageDialog(this, "Student deleted");
            selectedRow = -1; 
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        selectedRow = jTable1.getSelectedRow();
    }//GEN-LAST:event_jTable1MouseClicked

    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            String sort = jComboBox2.getSelectedItem().toString();
            TableRowSorter<DefaultTableModel> sorter = (TableRowSorter<DefaultTableModel>) jTable1.getRowSorter();
            List<RowSorter.SortKey> sortKeys = new ArrayList<>();
             if (sort.equals("Sort by:")) {
                sorter.setSortKeys(null);
                sorter.setRowFilter(null);
                changetablestudent(); 
            } else {
                switch (sort) {
                    case "ID number":
                        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
                        break;
                    case "First Name":
                        sortKeys.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));
                        break;
                    case "Last Name":
                        sortKeys.add(new RowSorter.SortKey(2, SortOrder.ASCENDING));
                        break;
                case "Year Level":
                        sortKeys.add(new RowSorter.SortKey(3, SortOrder.ASCENDING));
                        break;
                    case "Gender":
                        sortKeys.add(new RowSorter.SortKey(4, SortOrder.ASCENDING));
                        break;
                    case "Program Code":
                        sortKeys.add(new RowSorter.SortKey(5, SortOrder.ASCENDING));
                        break;
                    default:
                        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
                        break;
                }
                sorter.setSortKeys(sortKeys);
            }
        }
    }//GEN-LAST:event_jComboBox2ItemStateChanged

    private void jTextField4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyReleased
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        jTable1.setRowSorter(sorter);
        String search = jTextField4.getText().trim();
        String filter = jComboBox5.getSelectedItem().toString();
        RowFilter<DefaultTableModel, Object> filter_text = null;
        
        try {
            switch (filter) {
                case "Search by:":
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)"+jTextField4.getText()));
                    return;                
                case "ID Number":
                    filter_text = RowFilter.regexFilter(search, 0);
                    break;
                case "First Name":
                    filter_text = RowFilter.regexFilter("(?i)" + search, 1);
                    break;
                case "Last Name":
                    filter_text = RowFilter.regexFilter("(?i)" + search, 2);
                    break;
                case "Year Level":
                    filter_text = RowFilter.regexFilter(search, 3);
                break;
                case "Gender":
                    filter_text = RowFilter.regexFilter("(?i)" + search, 4);
                    break;
                case "Program Code":
                    filter_text = RowFilter.regexFilter("(?i)" + search, 5);
                    break;
                default:
                    sorter.setRowFilter(null);
                    return;
            }
        
            sorter.setRowFilter(filter_text);
        } catch (java.util.regex.PatternSyntaxException e) {
            sorter.setRowFilter(null); 
        }
    }//GEN-LAST:event_jTextField4KeyReleased

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        clearstudent();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (checkStudent()) {
            try {
                CSVWriter writer = new CSVWriter(new FileWriter("D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\Student.csv", true),
                    CSVWriter.DEFAULT_SEPARATOR,
                    CSVWriter.DEFAULT_QUOTE_CHARACTER,
                    CSVWriter.DEFAULT_ESCAPE_CHARACTER,
                    CSVWriter.DEFAULT_LINE_END);

                String id = jTextField1.getText().trim();
                String first = jTextField2.getText().trim();
                String last = jTextField3.getText().trim();
                String year = jTextField5.getText().trim();
                String gender = jComboBox1.getSelectedItem().toString();
                String program = jComboBox4.getSelectedItem().toString();

                if (isduplicatestudent(id)) {
                    JOptionPane.showMessageDialog(this, "Duplicate Student ID", "Error", JOptionPane.ERROR_MESSAGE);
                return; 
                }
                
                String[] newRow = {id, first, last, year, gender, program};

                writer.writeNext(newRow);
                writer.close();

                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.addRow(newRow);

                JOptionPane.showMessageDialog(this, "Student added");

                jTextField1.setText("");
                jTextField2.setText("");
                jTextField3.setText("");
                jTextField5.setText("");
                jComboBox1.setSelectedIndex(0);
                jComboBox4.setSelectedIndex(0);

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
         if (checkProgram()) {
            try {
                String progcode = jTextField7.getText().trim();
                String progname = jTextField8.getText().trim();
                String collegecode = jComboBox3.getSelectedItem().toString();

                if (isduplicateprogram(progcode, progname)) {
                    JOptionPane.showMessageDialog(this, "Error: Program Code or Program Name already exists!", "Duplicate Entry", JOptionPane.WARNING_MESSAGE);
                    return; 
                }
                
                CSVWriter writer = new CSVWriter(new FileWriter("D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\Program.csv", true),
                    CSVWriter.DEFAULT_SEPARATOR,
                    CSVWriter.DEFAULT_QUOTE_CHARACTER,
                    CSVWriter.DEFAULT_ESCAPE_CHARACTER,
                    CSVWriter.DEFAULT_LINE_END);

                
                String[] newRow = {progcode, progname, collegecode};

                writer.writeNext(newRow);
                writer.close();

                DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
                model.addRow(newRow);

                JOptionPane.showMessageDialog(this, "Program added");

                jTextField7.setText("");
                jTextField8.setText("");
                jComboBox3.setSelectedIndex(0);
                loadProgram();


            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
            
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        clearprog();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jTextField12KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField12KeyReleased
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        jTable2.setRowSorter(sorter);
        String search = jTextField12.getText().trim();
        String filter = jComboBox8.getSelectedItem().toString();
        RowFilter<DefaultTableModel, Object> filter_text = null;
        
        try {
            switch (filter) {
                case "Search by:":
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)"+jTextField12.getText()));
                    return;                
                case "Program Code":
                    filter_text = RowFilter.regexFilter("(?i)" +search, 0);
                    break;
                case "Program Name":

                    filter_text = RowFilter.regexFilter("(?i)" + search, 1);
                    break;
                case "College Code":
                    filter_text = RowFilter.regexFilter("(?i)" + search, 2);
                    break;
                default:
                    sorter.setRowFilter(null);
                    return;
            }
        
            sorter.setRowFilter(filter_text);
        } catch (java.util.regex.PatternSyntaxException e) {
            sorter.setRowFilter(null); 
        }
    }//GEN-LAST:event_jTextField12KeyReleased

    private void jComboBox6ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox6ItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            String sort = jComboBox6.getSelectedItem().toString();
            TableRowSorter<DefaultTableModel> sorter2 = (TableRowSorter<DefaultTableModel>) jTable2.getRowSorter();
            List<RowSorter.SortKey> sortKeys = new ArrayList<>();
            if (sort.equals("Sort by:")) {
                sorter2.setSortKeys(null);
                sorter2.setRowFilter(null);
                changetableprogram(); 
            } else {
                switch (sort) {
                    case "Program Code":
                        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
                        break;
                    case "Program Name":
                        sortKeys.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));
                        break;
                    case "College Code":
                        sortKeys.add(new RowSorter.SortKey(2, SortOrder.ASCENDING));
                        break;
                    default:
                        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
                       break;
               }
               sorter2.setSortKeys(sortKeys);
            }
        }
    }//GEN-LAST:event_jComboBox6ItemStateChanged

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        selectedRow = jTable2.getSelectedRow();
    }//GEN-LAST:event_jTable2MouseClicked

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        if (selectedRow >= 0) { 
            DefaultTableModel thinger = (DefaultTableModel) jTable2.getModel();
            int rowind = jTable2.convertRowIndexToModel(selectedRow);
            String pcode = thinger.getValueAt(rowind, 0).toString(); 
            int affectedstudents = stud_aff(pcode);
            //check if want to del4sure
            if (affectedstudents > 0) {
                int confirm = JOptionPane.showConfirmDialog(this,
                "Do you really want to delete this? You will be turning all current existing Program Codes into NULL and affecting " 
                + affectedstudents + " students.","Confirm Deletion",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);

                if (confirm != JOptionPane.YES_OPTION) {
                    return;
                }
            }
        thinger.removeRow(rowind);
        deleteCSVprogram(pcode);
        updatenull_student(pcode);
        upd_combobox_student();
        JOptionPane.showMessageDialog(this, "Program deleted and " + affectedstudents + " student(s) updated.");    
        selectedRow = -1;
        
        } else {
            JOptionPane.showMessageDialog(this, "Select a row to delete", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton9ActionPerformed
    
    
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        if (selectedRow >= 0) {
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        
        int modelRow = jTable2.convertRowIndexToModel(selectedRow);
        
        String oldprogcode = model.getValueAt(modelRow, 0).toString(); 
        String oldprogname = model.getValueAt(modelRow, 1).toString();

        JTextField progcode = new JTextField(oldprogcode);
        JTextField progname = new JTextField(oldprogname);

        List<String> colleges = getcollegecodes();
        JComboBox<String> college = new JComboBox<>(colleges.toArray(new String[0]));
        college.setSelectedItem(model.getValueAt(modelRow, 2).toString());

        Object[] fields = {
            "Program Code:", progcode,
            "Program Name:", progname,
            "College Code:", college
        };

        int result = JOptionPane.showConfirmDialog(null, fields, "Edit Program", JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            StringBuilder missed = new StringBuilder();

            if (progcode.getText().trim().isEmpty()) {
                missed.append("Program Code is missing\n");
            } else if (!progcode.getText().trim().matches("[A-Z ]+")) {
                missed.append("Program Code must contain only uppercase letters and numbers\n");
            }

            if (progname.getText().trim().isEmpty()) {
                missed.append("Program Name is missing\n");
            } else if (!progname.getText().trim().matches("[A-Za-z ]+")) {
                missed.append("Program Code must contain only uppercase letters and numbers\n");
            }

            String newprogcode = progcode.getText().trim();
            String newprogname = progname.getText().trim();

            boolean duplicate = false;
            for (int i = 0; i < model.getRowCount(); i++) {
                if (i != modelRow) { 
                    String progcode_check = model.getValueAt(i, 0).toString().trim();
                    String progname_check = model.getValueAt(i, 1).toString().trim();

                    if (newprogcode.equals(progcode_check) || newprogname.equalsIgnoreCase(progname_check)) {
                        duplicate = true;
                        missed.append("Duplicate Program Code or Program Name exists\n");
                        break;
                    }
                }
            }
            if (missed.length() > 0) {
                JOptionPane.showMessageDialog(this, missed.toString(), "Invalid Input", JOptionPane.ERROR_MESSAGE);
                return; 
            }
            model.setValueAt(newprogcode, modelRow, 0);
            model.setValueAt(newprogname, modelRow, 1);
            model.setValueAt(college.getSelectedItem().toString(), modelRow, 2);

            updateCSVprogram(oldprogcode, newprogcode, newprogname, college.getSelectedItem().toString());

            if (!oldprogcode.equals(newprogcode)) {
                updatestudent_afterprogram_edit(oldprogcode, newprogcode);
            }

            JOptionPane.showMessageDialog(this, "Program updated successfully!");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Select a row to edit", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
         if (checkCollege()) { 
        String collegecode = jTextField10.getText().trim();
        String collegename = jTextField11.getText().trim();

        if (isduplicatecollege(collegecode, collegename)) {
            JOptionPane.showMessageDialog(this, "Error: College Code or College Name already exists!", "Duplicate Entry", JOptionPane.WARNING_MESSAGE);
            return; 
        }

        try {
            CSVWriter writer = new CSVWriter(new FileWriter("D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\College.csv", true),
                CSVWriter.DEFAULT_SEPARATOR,
                CSVWriter.DEFAULT_QUOTE_CHARACTER,
                CSVWriter.DEFAULT_ESCAPE_CHARACTER,
                CSVWriter.DEFAULT_LINE_END);

            String[] next_row = {collegecode, collegename};

            writer.writeNext(next_row);
            writer.close();

            DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
            model.addRow(next_row);
            JOptionPane.showMessageDialog(this, "College added");
            
            jTextField10.setText(""); 
            jTextField11.setText("");
            loadCollege();  

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        clearcollege();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jTextField14KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField14KeyReleased
        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        jTable3.setRowSorter(sorter);
        String search = jTextField14.getText().trim();
        String filter = jComboBox9.getSelectedItem().toString();
        RowFilter<DefaultTableModel, Object> filter_text = null;
        
        try {
            switch (filter) {
                case "Search by:":
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)"+jTextField14.getText()));
                    return;                
                case "College Code":
                    filter_text = RowFilter.regexFilter("(?i)" +search, 0);
                    break;
                case "College Name":
                    filter_text = RowFilter.regexFilter("(?i)" + search, 1);
                    break;
                default:
                    sorter.setRowFilter(null);
                    return;
            }
        
            sorter.setRowFilter(filter_text);
        } catch (java.util.regex.PatternSyntaxException e) {
            sorter.setRowFilter(null); 
        }
    }//GEN-LAST:event_jTextField14KeyReleased

    private void jComboBox7ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox7ItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
        String sort = jComboBox7.getSelectedItem().toString();

        TableRowSorter<DefaultTableModel> sorter3 = (TableRowSorter<DefaultTableModel>) jTable3.getRowSorter();
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();

        if (sort.equals("Sort by:")) {
            sorter3.setSortKeys(null);
            sorter3.setRowFilter(null);
            changetablecollege();
        } else {
            switch (sort) {
                case "College Code":
                    sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
                    break;
                case "College Name":
                    sortKeys.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));
                    break;

                default:
                    sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
                    break;
            }
            sorter3.setSortKeys(sortKeys);
        }
    }
    }//GEN-LAST:event_jComboBox7ItemStateChanged

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
        selectedRow = jTable3.getSelectedRow();
    }//GEN-LAST:event_jTable3MouseClicked

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        if (selectedRow >= 0) { 
        DefaultTableModel thinger = (DefaultTableModel) jTable3.getModel();
        int rowind = jTable3.convertRowIndexToModel(selectedRow);
        String deletecollege = thinger.getValueAt(rowind, 0).toString();
        int aff_prog = countprog_aff(deletecollege);   
        if (aff_prog > 0) {
            int confirm = JOptionPane.showConfirmDialog(
                this,
                "Do you really want to delete this? You will be turning every current existing Program Code that has this value "
              + "into NULL and affecting " + aff_prog + " programs.","Confirm Deletion",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
            if (confirm != JOptionPane.YES_OPTION) {
                return;
            }
        }
        thinger.removeRow(rowind);
        deleteCSVcollege(deletecollege);
        updatenull_program(deletecollege);
        upd_combobox_prog();
        JOptionPane.showMessageDialog(this, "College deleted and " + aff_prog + " program(s) updated.");       
        selectedRow = -1; 
        } else {
            JOptionPane.showMessageDialog(this, "Select a row to delete", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        if (selectedRow >= 0) {
        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
        int rowind = jTable3.convertRowIndexToModel(selectedRow);
        String oldccode = model.getValueAt(rowind, 0).toString();
        String oldcname = model.getValueAt(rowind, 1).toString();

        JTextField ccode = new JTextField(oldccode);
        JTextField cname = new JTextField(oldcname);

        Object[] fields = {
            "College Code:", ccode,
            "College Name:", cname
        };
        int result = JOptionPane.showConfirmDialog(null, fields, "Edit College", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            StringBuilder missed = new StringBuilder();
            if (ccode.getText().trim().isEmpty()) {
                missed.append("College Code is missing\n");
            } else if (!ccode.getText().trim().matches("[A-Z ]+")) {
                missed.append("College Code must contain only uppercase letters\n");
            }
            if (cname.getText().trim().isEmpty()) {
                missed.append("College Name is missing\n");
            } else if (!cname.getText().trim().matches("[A-Za-z ]+")) {
                missed.append("College Name must contain only letters\n");
            }
            String newccode = ccode.getText().trim();
            String newcname = cname.getText().trim();
            //check dupli
            boolean duplicate = false;
            for (int i = 0; i < model.getRowCount(); i++) {
                if (i != rowind) { 
                    String ccode2 = model.getValueAt(i, 0).toString().trim();
                    String cname2 = model.getValueAt(i, 1).toString().trim();
                    if (newccode.equals(ccode2) || newcname.equalsIgnoreCase(cname2)) {
                        duplicate = true;
                        missed.append("Duplicate College Code or College Name exists\n");
                        break;
                    }
                }
            }
            if (missed.length() > 0) {
                JOptionPane.showMessageDialog(this, missed.toString(), "Invalid Input", JOptionPane.ERROR_MESSAGE);
                return; 
            }
            model.setValueAt(newccode, rowind, 0);
            model.setValueAt(newcname, rowind, 1);
            updateCSVcollege(oldccode, newccode, newcname);
            //update program trab
            if (!oldccode.equals(newccode)) {
                updateprogram_aftercollege_edit(oldccode, newccode);
            }

            JOptionPane.showMessageDialog(this, "College updated successfully!");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select a row to edit", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jComboBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox5ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jComboBox8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox8ActionPerformed

    private void jTextField12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField12ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField12ActionPerformed

    private int selectedRow = -1;    
    /**
     * @param args the command line arguments
     */
    public Home() {
        initComponents(); 
        loadCSV_table1("D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\Student.csv");
        loadCSV_table2("D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\Program.csv");
        loadCSV_table3("D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\College.csv");
        jTable1.setDefaultEditor(Object.class, null);
        jTable2.setDefaultEditor(Object.class, null);
        jTable3.setDefaultEditor(Object.class, null);
        loadCollege();
        loadProgram();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        jTable1.setRowSorter(sorter);
        DefaultTableModel model2 = (DefaultTableModel) jTable2.getModel();
        TableRowSorter<DefaultTableModel> sorter2 = new TableRowSorter<>(model2);
        jTable2.setRowSorter(sorter2);
        DefaultTableModel model3 = (DefaultTableModel) jTable3.getModel();
        TableRowSorter<DefaultTableModel> sorter3 = new TableRowSorter<>(model3);
        jTable3.setRowSorter(sorter3);
    }
    
    private void loadCSV_table1(String path) {
    try (CSVReader csvReader = new CSVReader(new FileReader(path))) {
        List<String[]> student_data = csvReader.readAll();
        if (student_data.isEmpty()) {
            JOptionPane.showMessageDialog(this, "CSV file is empty!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        String[] columnNames = student_data.get(0);
        DefaultTableModel tab_model = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return row != 0;
            }
        };
        for (int i = 1; i < student_data.size(); i++) {
            tab_model.addRow(student_data.get(i));
        }
        jTable1.setModel(tab_model);
        jTable1.getTableHeader().setResizingAllowed(false);
        } 
        catch (IOException | CsvException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void loadCSV_table2(String path) {
    try (CSVReader csvReader = new CSVReader(new FileReader(path))) {
        List<String[]> program_records = csvReader.readAll();
        if (program_records.isEmpty()) {
            JOptionPane.showMessageDialog(this, "CSV file is empty!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        String[] columnNames = program_records.get(0);
        DefaultTableModel tab_model = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return row != 0;
            }
        };
        for (int i = 1; i < program_records.size(); i++) {
            tab_model.addRow(program_records.get(i));
        }
        jTable2.setModel(tab_model);
        jTable2.getTableHeader().setResizingAllowed(false);
        } 
        catch (IOException | CsvException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void loadCSV_table3(String path) {
    try (CSVReader csvReader = new CSVReader(new FileReader(path))) {
        List<String[]> program_records = csvReader.readAll();
        if (program_records.isEmpty()) {
            JOptionPane.showMessageDialog(this, "CSV file is empty!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        String[] columnNames = program_records.get(0);
        DefaultTableModel tab_model = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return row != 0;
            }
        };
        for (int i = 1; i < program_records.size(); i++) {
            tab_model.addRow(program_records.get(i));
        }
        jTable3.setModel(tab_model);
        jTable3.getTableHeader().setResizingAllowed(false);
        } 
        catch (IOException | CsvException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void clearstudent() {
        jTextField1.setText(null);
        jTextField2.setText(null);
        jTextField3.setText(null);
        jTextField5.setText(null);
        jComboBox1.setSelectedIndex(0);
        jComboBox4.setSelectedIndex(0);
        
    }
    
    private void clearprog() {
        jTextField7.setText(null);
        jTextField8.setText(null);
        jComboBox3.setSelectedIndex(0);
        
    }
    
    private void clearcollege() {
        jTextField10.setText(null);
        jTextField11.setText(null);

        
    }
    
  public boolean checkStudent() {
    StringBuilder missed = new StringBuilder();
    String pattern = "\\d{4}-\\d{4}";
    
    if (jTextField1.getText().isEmpty()) {
        missed.append("Student ID is missing\n");
    } else if (!jTextField1.getText().matches(pattern)) {
        missed.append("Student ID must follow the format YYYY-XXXX (ex. 2023-1949)\n");
    }

    if (jTextField2.getText().isEmpty()) {
         missed.append("First name is missing\n");
    } else if (!jTextField2.getText().matches("[a-zA-Z ]+")) {
        missed.append("First name must contain only alphabets\n");
    }

    if (jTextField3.getText().isEmpty()) {
        missed.append("Last name is missing\n");
    } else if (!jTextField3.getText().matches("[a-zA-Z ]+")) {
        missed.append("Last name must contain only alphabets\n");
    }
    
    if (jTextField5.getText().isEmpty()) {
        missed.append("Year Level is missing\n");
    } else {
        try {
            int yearLevel = Integer.parseInt(jTextField5.getText());
            if (yearLevel < 1 || yearLevel > 6) {
                missed.append("Year Level must be between 1 and 6\n");
            }
        } catch (NumberFormatException e) {
            missed.append("Year Level must be a number between 1 and 6\n");
        }
    }

    

    if (missed.length() > 0) {
        JOptionPane.showMessageDialog(this, missed.toString(), "WARNING", JOptionPane.WARNING_MESSAGE);
        return false;
    }

    return true;
}
private void deleteCSVstudent(String delete) {
            String filePath = "D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\Student.csv";

            try {
                List<String[]> allRows;
                try (CSVReader reader = new CSVReader(new FileReader(filePath))) {
                    allRows = reader.readAll();
                }

                try (CSVWriter writer = new CSVWriter(new FileWriter(filePath))) {
                    for (String[] row : allRows) {
                        if (!row[0].equals(delete)) {
                            writer.writeNext(row);
                        }
                    }
                }
            } catch (IOException | CsvException e) {
                e.printStackTrace();
            }
}

private void deleteCSVprogram(String delete) {
            String filePath = "D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\Program.csv";

            try {
                List<String[]> allRows;
                try (CSVReader reader = new CSVReader(new FileReader(filePath))) {
                    allRows = reader.readAll();
                }

                try (CSVWriter writer = new CSVWriter(new FileWriter(filePath))) {
                    for (String[] row : allRows) {
                        if (!row[0].equals(delete)) { 
                            writer.writeNext(row);
                        }
                    }
                }
            } catch (IOException | CsvException e) {
                e.printStackTrace();
            }
}

public boolean checkProgram() {
    StringBuilder missed = new StringBuilder();  
    if (jTextField7.getText().isEmpty()) {
        missed.append("Program Code is missing\n");
    } else if (!jTextField7.getText().matches("[A-Z ]+")) {
        missed.append("Program Code must contain only capitalized letters\n");
    }
    if (jTextField8.getText().isEmpty()) {
         missed.append("Program Name is missing\n");
    } else if (!jTextField8.getText().matches("[a-zA-Z ]+")) {
        missed.append("Program Name must contain only alphabets\n");
    }
    

    if (missed.length() > 0) {
        JOptionPane.showMessageDialog(this, missed.toString(), "WARNING", JOptionPane.WARNING_MESSAGE);
        return false;
    }

    return true;
}

public boolean checkCollege() {
    StringBuilder missed = new StringBuilder();
    
    if (jTextField10.getText().isEmpty()) {
        missed.append("College Code is missing\n");
    } else if (!jTextField10.getText().matches("[A-Z ]+")) {
        missed.append("College Code must contain only capitalized letters\n");
    }
    if (jTextField11.getText().isEmpty()) {
         missed.append("College Name is missing\n");
    } else if (!jTextField11.getText().matches("[a-zA-Z ]+")) {
        missed.append("College Name must contain only alphabets\n");
    }

    

    if (missed.length() > 0) {
        JOptionPane.showMessageDialog(this, missed.toString(), "WARNING", JOptionPane.WARNING_MESSAGE);
        return false;
    }

    return true;
}

private boolean isduplicatecollege(String code, String name) {
    try (CSVReader reader = new CSVReader(new FileReader("D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\College.csv"))) {
        
        List<String[]> collegecodes;
        try {
            collegecodes = reader.readAll();
        } catch (CsvException e) {
            e.printStackTrace();
            return false; // 
        }
        boolean firstrow = true; //check if header exists, eixts = skip
        for (String[] row : collegecodes) {
            if (firstrow) { 
                firstrow = false; 
                continue;
            }
            if (row.length > 1) { //if more than 2 columns = go through
                String existingCode = row[0].trim();
                String existingName = row[1].trim();
                if (existingCode.equalsIgnoreCase(code) || existingName.equalsIgnoreCase(name)) {
                    return true;
                }
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
    return false;
}

private boolean isduplicateprogram(String code, String name) {
    try (CSVReader reader = new CSVReader(new FileReader("D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\Program.csv"))) {
        
        List<String[]> programcodes;
        try {
            programcodes = reader.readAll();
        } catch (CsvException e) {
            e.printStackTrace();
            return false;
        }
        boolean isFirstRow = true;
        for (String[] row : programcodes) {
            if (isFirstRow) { 
                isFirstRow = false; 
                continue;
            }
            if (row.length > 1) {
                String existingCode = row[0].trim();
                String existingName = row[1].trim();
                if (existingCode.equalsIgnoreCase(code) || existingName.equalsIgnoreCase(name)) {
                    return true;
                }
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
    return false;
}

private boolean isduplicatestudent(String id) {
    try (CSVReader reader = new CSVReader(new FileReader("D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\Student.csv"))) {
        List<String[]> student_ids;
        try {
            student_ids = reader.readAll(); 
        } catch (CsvException e) {
            e.printStackTrace();
            return false; 
        }
        boolean isFirstRow = true; 
        for (String[] row : student_ids) {
            if (isFirstRow) { 
                isFirstRow = false; 
                continue;
            }
            if (row.length > 1) { 
                String existingid = row[0].trim();

                if (existingid.equalsIgnoreCase(id)) {
                    return true; 
                }
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
    return false; 
}

private void loadCollege() {
    String path = "D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\College.csv";
    try (CSVReader reader = new CSVReader(new FileReader(path))) {
        List<String[]> ccode_records;      
        try {
            ccode_records = reader.readAll();
        } catch (CsvException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        jComboBox3.removeAllItems();
        boolean isFirstRow = true;
        for (String[] row : ccode_records) {
            if (isFirstRow) { 
                isFirstRow = false; 
                continue;
            }
            if (row.length > 0) {
                jComboBox3.addItem(row[0].trim());
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

private void loadProgram() {
    String path = "D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\Program.csv";
    try (CSVReader reader = new CSVReader(new FileReader(path))) {
        List<String[]> pcode_records;       
        try {
            pcode_records = reader.readAll(); 
        } catch (CsvException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        jComboBox4.removeAllItems(); 
        boolean isFirstRow = true; 
        for (String[] row : pcode_records) {
            if (isFirstRow) { 
                isFirstRow = false; 
                continue;
            }
            if (row.length > 0) {
                jComboBox4.addItem(row[0].trim());
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    private void updateCSVstudent(String old_id, String new_id, String first, String last, String year, String gender, String program) {
            String path = "D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\Student.csv";
            try {
                List<String[]> all_rows;
                try (CSVReader reader = new CSVReader(new FileReader(path))) {
                    all_rows = reader.readAll();
                }
                try (CSVWriter writer = new CSVWriter(new FileWriter(path))) {
                    for (String[] row : all_rows) {
                        if (row[0].equals(old_id)) {
                            row[0] = new_id;
                            row[1] = first;
                            row[2] = last;
                            row[3] = year;
                            row[4] = gender;
                            row[5] = program;
                        }
                        writer.writeNext(row);
                    }
                }
            } catch (IOException | CsvException e) {
                e.printStackTrace();
            }
    }
    
    private void updateCSVprogram(String oldprogcode, String newprogcode, String newprogname, String newcollegecode) {
        String path = "D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\Program.csv";
    try {
        List<String[]> all_rows;
        try (CSVReader reader = new CSVReader(new FileReader(path))) {
            all_rows = reader.readAll();
        }
        try (CSVWriter writer = new CSVWriter(new FileWriter(path))) {
            for (String[] row : all_rows) {
                if (row[0].equals(oldprogcode)) { 
                    row[0] = newprogcode;
                    row[1] = newprogname;
                    row[2] = newcollegecode;
                }
                    writer.writeNext(row);
                }
            }
        } catch (IOException | CsvException e) {
            e.printStackTrace();
        }
    }
    
    private void updateCSVcollege(String oldccode, String newccode, String newcname) {
        String path = "D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\College.csv";

    try {
        List<String[]> all_rows;
        try (CSVReader reader = new CSVReader(new FileReader(path))) {
            all_rows = reader.readAll();
        }

        try (CSVWriter writer = new CSVWriter(new FileWriter(path))) {
            for (String[] row : all_rows) {
                if (row[0].equals(oldccode)) { 
                    row[0] = newccode;
                    row[1] = newcname;
                }
                    writer.writeNext(row);
                }
            }
        } catch (IOException | CsvException e) {
            e.printStackTrace();
        }
    }
    
    private void updatestudent_afterprogram_edit(String oldpcode, String newpcode) {
    String path = "D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\Student.csv";
    List<String[]> all_rows = new ArrayList<>();

    try (CSVReader reader = new CSVReader(new FileReader(path))) {
        all_rows = reader.readAll();
    } catch (IOException | CsvException e) {
        e.printStackTrace();
    }

    try (CSVWriter writer = new CSVWriter(new FileWriter(path))) {
        for (String[] row : all_rows) {
            if (row[5].equals(oldpcode)) { 
                row[5] = newpcode; 
            }
            writer.writeNext(row);
        }
    } catch (IOException e) {
        e.printStackTrace();
    }

    //update stud table
    DefaultTableModel studentModel = (DefaultTableModel) jTable1.getModel();
    for (int i = 0; i < studentModel.getRowCount(); i++) {
        if (studentModel.getValueAt(i, 5).toString().equals(oldpcode)) {
            studentModel.setValueAt(newpcode, i, 5);
        }
    }
}
    
    private void updateprogram_aftercollege_edit(String oldccode, String newccode) {
    String path = "D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\Program.csv";
    List<String[]> all_rows = new ArrayList<>();

    try (CSVReader reader = new CSVReader(new FileReader(path))) {
        all_rows = reader.readAll();
    } catch (IOException | CsvException e) {
        e.printStackTrace();
    }

    try (CSVWriter writer = new CSVWriter(new FileWriter(path))) {
        for (String[] row : all_rows) {
            if (row[2].equals(oldccode)) {
                row[2] = newccode;
            }
            writer.writeNext(row);
        }
    } catch (IOException e) {
        e.printStackTrace();
    }

    //update prog table
    DefaultTableModel studmodel = (DefaultTableModel) jTable2.getModel();
    for (int i = 0; i < studmodel.getRowCount(); i++) {
        if (studmodel.getValueAt(i, 2).toString().equals(oldccode)) {
            studmodel.setValueAt(newccode, i, 2);
        }
    }
}
    
    
    //program code combo box student
    private List<String> getprogcodes() {
    List<String> progcode = new ArrayList<>();
    String path = "D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\Program.csv";

    try (CSVReader reader = new CSVReader(new FileReader(path))) {
        List<String[]> all_Rows = reader.readAll();
        for (int i = 1; i < all_Rows.size(); i++) {  
            progcode.add(all_Rows.get(i)[0]);   
        }
    } catch (IOException | CsvException e) {
        e.printStackTrace();
    }

    return progcode;
}
    
    private List<String> getcollegecodes() {
    List<String> progcode = new ArrayList<>();
    String path = "D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\College.csv";

    try (CSVReader reader = new CSVReader(new FileReader(path))) {
        List<String[]> all_rows = reader.readAll();
        for (int i = 1; i < all_rows.size(); i++) {  
            progcode.add(all_rows.get(i)[0]);   
        }
    } catch (IOException | CsvException e) {
        e.printStackTrace();
    }

    return progcode;
}
    //count affected program
    private int countprog_aff(String ccode) {
        DefaultTableModel thing = (DefaultTableModel) jTable2.getModel(); 
        int count = 0;
        for (int i = 0; i < thing.getRowCount(); i++) {
            if (thing.getValueAt(i, 2).toString().equals(ccode)) {
                count++;
            }
        }
        return count;
    }
    
    //update existing college code to null
    private void updatenull_program(String ccode) {
        String filePath = "D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\Program.csv";
        List<String[]> allRows = new ArrayList<>();

        try (CSVReader reader = new CSVReader(new FileReader(filePath))) {
            allRows = reader.readAll();
        } catch (IOException | CsvException e) {
            e.printStackTrace();
        }

        try (CSVWriter writer = new CSVWriter(new FileWriter(filePath))) {
            for (String[] row : allRows) {
                    if (row[2].equals(ccode)) { 
                    row[2] = "NULL"; 
                }
                writer.writeNext(row);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        DefaultTableModel thing = (DefaultTableModel) jTable2.getModel();
        for (int i = 0; i < thing.getRowCount(); i++) {
            if (thing.getValueAt(i, 2).toString().equals(ccode)) {
                thing.setValueAt("NULL", i, 2); 
            }
        }
    }
    //delete row in csv forr college
    private void deleteCSVcollege(String delete) {
        String path = "D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\College.csv";
        List<String[]> updaterow = new ArrayList<>();
        try (CSVReader reader = new CSVReader(new FileReader(path))) {
            List<String[]> all_rows = reader.readAll();
            if (!all_rows.isEmpty()) {
                updaterow.add(all_rows.get(0));
            
                for (int i = 1; i < all_rows.size(); i++) {
                    if (!all_rows.get(i)[0].equals(delete)) {
                        updaterow.add(all_rows.get(i));
                    }
                }
            }
        } catch (IOException | CsvException e) {
            e.printStackTrace();
        }
        try (CSVWriter writer = new CSVWriter(new FileWriter(path))) {
            writer.writeAll(updaterow);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    //count affected student
    private int stud_aff(String pcode) {
        DefaultTableModel thing = (DefaultTableModel) jTable1.getModel();
        int count = 0;
        for (int i = 0; i < thing.getRowCount(); i++) {
            if (thing.getValueAt(i, 5).toString().equals(pcode)) {
                count++;
            }
        }
        return count;
    }
    
    //update existing program code to null
    private void updatenull_student(String ccode) {
        String path = "D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\Student.csv";
        List<String[]> all_rows = new ArrayList<>();

        try (CSVReader reader = new CSVReader(new FileReader(path))) {
            all_rows = reader.readAll();
        } catch (IOException | CsvException e) {
            e.printStackTrace();
        }
        try (CSVWriter writer = new CSVWriter(new FileWriter(path))) {
            for (String[] row : all_rows) {
                    if (row[5].equals(ccode)) { 
                    row[5] = "NULL"; 
                }
                writer.writeNext(row);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        DefaultTableModel thing = (DefaultTableModel) jTable1.getModel();
        for (int i = 0; i < thing.getRowCount(); i++) {
            if (thing.getValueAt(i, 5).toString().equals(ccode)) {
                thing.setValueAt("NULL", i, 5); 
            }
        }
    }
    
    private void changetablestudent() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); 
        String path = "D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\Student.csv";
        try (CSVReader reader = new CSVReader(new FileReader(path))) {
            List<String[]> all_rows = reader.readAll();
            if (all_rows.size() > 1) {
                for (int i = 1; i < all_rows.size(); i++) {
                    model.addRow(all_rows.get(i)); 
                }
            }
        } catch (IOException | CsvException e) {
        e.printStackTrace();
        }
    }
    
    private void changetableprogram() {
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        String path = "D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\Program.csv";
        try (CSVReader reader = new CSVReader(new FileReader(path))) {
            List<String[]> all_rows = reader.readAll();
            if (all_rows.size() > 1) {
                for (int i = 1; i < all_rows.size(); i++) {
                    model.addRow(all_rows.get(i)); 
                }
            }
        } catch (IOException | CsvException e) {
            e.printStackTrace();
        }
    } 
    
    private void changetablecollege() {
        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
        model.setRowCount(0);
        String path = "D:\\Users\\User\\Documents\\NetBeansProjects\\StudentInformationSystem\\src\\main\\java\\student\\College.csv";
        try (CSVReader reader = new CSVReader(new FileReader(path))) {
            List<String[]> all_rows = reader.readAll();
            if (all_rows.size() > 1) {
                for (int i = 1; i < all_rows.size(); i++) {
                    model.addRow(all_rows.get(i)); 
                }
            }
        } catch (IOException | CsvException e) {
            e.printStackTrace();
        }
    } 
    
    private void upd_combobox_prog() {
        jComboBox3.removeAllItems();
        List<String> colleges = getcollegecodes();
        for (String college : colleges) {
            jComboBox3.addItem(college);
        }
    }
    
    private void upd_combobox_student() {
        jComboBox4.removeAllItems();
        List<String> colleges = getprogcodes();
        for (String college : colleges) {
            jComboBox4.addItem(college);
        }
    }
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JComboBox<String> jComboBox5;
    private javax.swing.JComboBox<String> jComboBox6;
    private javax.swing.JComboBox<String> jComboBox7;
    private javax.swing.JComboBox<String> jComboBox8;
    private javax.swing.JComboBox<String> jComboBox9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    // End of variables declaration//GEN-END:variables
}
